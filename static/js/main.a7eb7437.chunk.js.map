{"version":3,"sources":["components/loading.js","utils/axiosConfig.js","actions/index.js","actions/types.js","components/teamList.js","components/detailsCard.js","components/results.js","components/searchBar.js","App.js","serviceWorker.js","reducers/tempoReducers.js","reducers/index.js","index.js"],"names":["Loading","className","axiosInstance","axios","create","baseURL","axiosConfig","method","url","callBack","then","response","selectItem","item","type","payload","slecteditem","TeamList","this","props","fetchUsers","members","users","length","teams","map","team","activeItem","key","id","onClick","name","filter","user","teamId","helper","teamLeadName","first","last","renderList","Component","connect","state","appState","dispatch","Promise","resolve","reject","response1","count","userLength","data","forEach","userId","response2","DetailCards","member","itemType","teammembers","userteam","teamLead","Results","fetchTeams","renderResults","teamLength","element","SearchBar","term","searchList","push","toLocaleLowerCase","includes","onChange","event","onSearchInputChange","target","value","placeholder","App","Boolean","window","location","hostname","match","Initial_State","rootReducer","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7eb7437.chunk.js","sourcesContent":["import React from 'react';\nimport '../assets/styles/loading.scss'\n\nconst Loading = () => {\n        return (\n            <div className={\"loaderContainer\"}>\n                <div className={\"loader\"}>\n                </div>\n            </div>\n        );\n}\n\nexport default Loading;","import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: \"https://tempo-exercises.herokuapp.com/rest/v1/\",\n});\n\nconst axiosConfig = (method, url, callBack) => {\n  if (method === 'get') {\n    return axiosInstance({ url: url, method: method })\n      .then((response) => {\n        callBack(response)\n      })\n  } else if (method === 'post') {\n    return axiosInstance({ url: url, method: method })\n      .then((response) => {\n        callBack(response)\n      })\n  }\n};\n\nexport default axiosConfig;\n","import axiosConfig from '../utils/axiosConfig';\nimport { FETCH_TEAMS, ITEM_SELECTED, FETCH_USERS } from './types';\nexport function fetchTeams() {\n  return (dispatch) => {\n    let mainTeamPromise = new Promise((resolve, reject) => {\n      axiosConfig('get', 'teams', (response1) => {\n        let count = 0;\n        const teamLength = response1.data.length;\n        response1.data.forEach((element) => {\n          if (element.teamLead) {\n            axiosConfig('get', `users/${element.teamLead}/`, (response2) => {\n              count++;\n              element.teamLeadName = response2.data.name;\n              if (count === teamLength) {\n                resolve(response1.data);\n              }\n            });\n          } else {\n            count++;\n            element.teamLeadName = {\n              first: 'The position is not',\n              last: 'filled yet.',\n            };\n          }\n        });\n      });\n    });\n    mainTeamPromise.then((data) => {\n      dispatch({\n        type: FETCH_TEAMS,\n        payload: { teams: data },\n      });\n    });\n  };\n}\nexport function fetchUsers() {\n  return (dispatch) => {\n    let firstTeamPromise = new Promise((resolve, reject) => {\n      axiosConfig('get', 'users', (response1) => {\n        let count = 0;\n        const userLength = response1.data.length;\n        response1.data.forEach((user) => {\n          if (user.userId) {\n            axiosConfig('get', `users/${user.userId}/`, (response2) => {\n              count++;\n              user.name = response2.data.name;\n              if (count === userLength) {\n                resolve(response1.data);\n              }\n            });\n          } else {\n            count++;\n            user.name = { first: 'The position is not', last: 'filled yet.' };\n          }\n        });\n      });\n    });\n    firstTeamPromise.then((data) => {\n      dispatch({\n        type: FETCH_USERS,\n        payload: { users: data },\n      });\n    });\n  };\n}\nexport function selectItem(item) {\n  return {\n    type: ITEM_SELECTED,\n    payload: { slecteditem: item },\n  };\n}\n","export const FETCH_TEAMS = \"FETCH_TEAMS\";\nexport const ITEM_SELECTED = \"ITEM_SELECTED\";\nexport const FETCH_USERS = \"FETCH_USERS\";","\nimport React, { Component } from \"react\";\nimport '../assets/styles/detailsCard.scss';\nimport '../assets/styles/app.scss';\nimport { connect } from 'react-redux'\nimport { fetchUsers, selectItem } from '../actions/index'\nclass TeamList extends Component {\n\n  componentDidMount() {\n    this.props.fetchUsers();\n  }\n  helper(members) {\n    if (this.props.users.length === 0) {\n      return (\n        <div>\n          Loading ...\n          </div>\n      )\n    }\n    return (\n      <p\n\n      >\n        This team has {members.length} members.\n            </p>\n    )\n  }\n  renderList() {\n    return this.props.teams.map(team => {\n      if (this.props.activeItem.length > 0) {\n        return (\n          <div\n            className={\"infoWrapper\"}\n\n            key={team.id}\n            onClick={() => {\n              this.props.selectItem(team.id);\n            }\n            }\n          >\n            <div className={\"title\"}   >\n\n              {team.name}\n\n            </div>\n          </div >\n        );\n      } else {\n        const members = this.props.users.filter(user => user.teamId === team.id);\n        return (\n          <div\n            className={\"infoWrapper\"}\n            key={team.id}\n            onClick={() => {\n              this.props.selectItem(team.id);\n            }} >\n            <div className={\"overview\"} >\n              <div className={\"title\"}>\n                {team.name}\n              </div>\n              {this.helper(members)}\n              <p>\n                Leads by: {team.teamLeadName.first} {team.teamLeadName.last}\n              </p>\n            </div>\n          </div>\n        );\n      }\n    });\n\n  }\n  render() {\n    return (\n      <div\n        className={(this.props.activeItem.length > 0) ? \"CardsWrapperWithDetailPart\" : \"CardsWrapperNoDetailPart\"}\n\n      >\n        {this.renderList()}\n      </div>\n\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return { teams: state.appState.teams, activeItem: state.appState.activeItem, users: state.appState.users };\n}\nexport default connect(mapStateToProps, { selectItem: selectItem, fetchUsers: fetchUsers })(TeamList);\n","\nimport React, { Component } from \"react\";\nimport Loading from \"./loading\";\nimport '../assets/styles/loading.scss';\nimport '../assets/styles/app.scss';\nimport { connect } from 'react-redux'\nimport { selectItem } from '../actions/index'\n\nclass DetailCards extends Component {\n\n\n  teammembers(members) {\n\n\n    if (members.length === 0) {\n      return (\n        <div\n          className={\"nonmember\"}\n        >\n          This team does not have a member yet.\n        </div>\n      )\n    }\n    return (members.map(member => {\n      return (\n        <div\n          key={member.userId}\n          className={\"member\"}\n\n          onClick={() => {\n            this.props.selectItem(member.userId)\n          }}\n        >\n          {member.name.first} {member.name.last}\n        </div>\n      )\n    })\n\n    )\n  }\n  renderList() {\n    if (this.props.activeItem === 'nosearchresult') {\n      return (\n        <div\n          className=\"noResult\"\n        >\n          <div\n            className={\"infoWrapper\"}\n          >\n            <div\n              className={\"title\"}\n            >\n              No search result :(\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    if (this.props.itemType === 'team') {\n      const item = this.props.teams.filter(team => team.id === this.props.activeItem);\n      const members = this.props.users.filter(user => user.teamId === item[0].id);\n      // console.log(item);\n      if (this.props.users.length === 0) {\n        return (\n          <Loading className=\"loaderContainer\" />\n        )\n      }\n      return (\n\n        <div\n          className=\"team\"\n        >\n          <div\n            className={\"infoWrapper\"}\n          >\n            <div\n              className={\"title\"}\n            >\n              Team:  {item[0].name}\n            </div>\n            <p\n              className={\"overview\"}\n            >\n              Leads by: {item[0].teamLeadName.first} {item[0].teamLeadName.last}\n            </p>\n            <p\n              className={\"overview\"}\n            >\n              This team has {members.length} members.\n            </p>\n            <div\n              className={\"title\"}\n            >\n              Members\n            </div>\n            <div\n              className=\"teamMembers\"\n            >\n              {this.teammembers(members)}\n            </div>\n          </div>\n\n        </div>\n      )\n    }\n    if (this.props.itemType === 'user') {\n      const item = this.props.users.filter(user => user.userId === this.props.activeItem);\n      const userteam = this.props.teams.filter(team => team.id === item[0].teamId);\n\n      return (\n        <div\n          className=\"user\"\n        >\n          <div\n            className={\"infoWrapper\"}\n          >\n            <div\n              className={\"title\"}\n            >\n              User:  {item[0].name.first} {item[0].name.last}\n            </div>\n            <div >\n              Team:\n            </div>\n            <div\n              className=\"teamMembers\"\n            >\n              <div\n                onClick={() => {\n                  this.props.selectItem(userteam[0].id)\n                }}\n                className=\"member\"\n              >\n                {userteam[0].name}\n              </div>\n            </div>\n            <div>\n              Leads by:\n              </div>\n            <div\n              className=\"teamMembers\"\n            >\n              <div\n                onClick={() => {\n                  this.props.selectItem(userteam[0].teamLead)\n                }}\n                className=\"member\"\n              >\n                {userteam[0].teamLeadName.first} {userteam[0].teamLeadName.last}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      )\n    }\n  }\n  render() {\n    return (\n\n\n      <div className=\"detailCard\">\n        {this.renderList()}\n      </div>\n\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return { teams: state.appState.teams, activeItem: state.appState.activeItem, users: state.appState.users };\n}\n\nexport default connect(mapStateToProps, { selectItem: selectItem })(DetailCards);\n","import React, { Component } from 'react';\nimport Loading from '../components/loading';\nimport '../assets/styles/teamCard.scss';\nimport '../assets/styles/app.scss';\nimport '../assets/styles/loading.scss';\nimport '../assets/styles/homePage.scss';\nimport { connect } from 'react-redux';\nimport { fetchTeams, selectItem } from '../actions/index';\nimport TeamList from './teamList';\nimport DetailCards from './detailsCard';\nclass Results extends Component {\n  componentDidMount() {\n    this.props.fetchTeams();\n  }\n\n  renderResults() {\n    if (this.props.teams.length === 0) {\n      return <Loading className=\"loaderContainer\" />;\n    }\n\n    if (typeof this.props.activeItem === 'string') {\n      let itemNumber = this.props.teams.filter(\n        (team) => team.id === this.props.activeItem\n      );\n      let itemType;\n      if (itemNumber.length === 1) {\n        itemType = 'team';\n      } else {\n        itemType = 'user';\n      }\n\n      return (\n        <div>\n          <div\n            className=\"homebutton\"\n            onClick={() => {\n              this.props.selectItem(0);\n            }}\n          >\n            Home page\n          </div>\n          <div className=\"cardsMain\">\n            <TeamList />\n            <DetailCards itemType={itemType} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <TeamList />\n      </div>\n    );\n  }\n  render() {\n    return <div>{this.renderResults()}</div>;\n  }\n}\nfunction mapStateToProps(state) {\n  return { teams: state.appState.teams, activeItem: state.appState.activeItem };\n}\n\nexport default connect(mapStateToProps, {\n  fetchTeams: fetchTeams,\n  selectItem: selectItem,\n})(Results);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../assets/styles/searchBar.scss';\nimport { selectItem } from '../actions/index';\n\nclass SearchBar extends Component {\n  onSearchInputChange(term) {\n    let searchList = [];\n    this.props.teams.map((team) => {\n      return searchList.push({ id: team.id, name: team.name });\n    });\n    this.props.users.map((user) => {\n      return searchList.push({\n        id: user.userId,\n        name: `${user.name.first} ${user.name.last}`,\n      });\n    });\n\n    searchList = searchList.filter((item) =>\n      item.name.toLocaleLowerCase().includes(term.toLocaleLowerCase())\n    );\n    if (searchList.length > 0) {\n      this.props.selectItem(searchList[0].id);\n    } else {\n      this.props.selectItem('nosearchresult');\n    }\n\n    if (term.length === 0) {\n      this.props.selectItem(0);\n    }\n  }\n  render() {\n    return (\n      <div className={'searchBarContainer'}>\n        <input\n          onChange={(event) => this.onSearchInputChange(event.target.value)}\n          placeholder={'Search in Users and Teams'}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { teams: state.appState.teams, users: state.appState.users };\n}\n\nexport default connect(mapStateToProps, { selectItem: selectItem })(SearchBar);\n","\nimport React from \"react\";\nimport { Component } from \"react\";\nimport Results from \"./components/results\";\nimport SearchBar from \"./components/searchBar\";\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <SearchBar />\n        <Results />\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// This reducer actually contains all parameters of app state and this parameters will change\n// based on the actions which dispatched\n\nimport {\n  FETCH_TEAMS,\n  ITEM_SELECTED,\n  FETCH_USERS\n} from '../actions/types';\n\nconst Initial_State = {\n  users: [],\n  teams: [],\n  activeItem: []\n};\n\nexport default (state = Initial_State, action) => {\n  switch (action.type) {\n    case FETCH_TEAMS:\n      return { ...state, teams: action.payload.teams };\n    case ITEM_SELECTED:\n      return { ...state, activeItem: action.payload.slecteditem };\n    case FETCH_USERS:\n      return { ...state, users: action.payload.users };\n    default:\n      return state;\n  }\n}\n\n","import { combineReducers } from \"redux\";\n\nimport allReducers from './tempoReducers'\nconst rootReducer = combineReducers({\n  appState: allReducers\n});\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk';\nimport reducers from './reducers'\nconst store = createStore(reducers, applyMiddleware(thunk))\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}